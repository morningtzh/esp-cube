mod network;
mod utils;

use anyhow::{Error, Result};
use core::str;
use embedded_hal::digital; // 引入OutputPin特性
use embedded_svc::io::Write;
use esp_idf_svc::hal::prelude::Peripherals;
use esp_idf_svc::{
    eventloop::EspSystemEventLoop,
    hal::{
        delay,
        gpio::{
            self, AnyIOPin, IOPin, InputPin,
            OutputPin, PinDriver,
        },
        i2c::{I2cConfig, I2cDriver},
        prelude::*,
        spi::Spi,
    },
    http::{
        server::{Configuration, EspHttpServer},
        Method,
    },
    sys::esp_nofail,
};
use shtcx::{self, shtc3, PowerMode};
use std::{
    sync::{Arc, Mutex},
    thread::sleep,
    time::Duration,
};
use utils::rgb::{RGB8, WS2812RMT};

use network::wifi::wifi;

use embedded_hal::spi::MODE_3;

use display_interface_spi::SPIInterface;
use esp_idf_svc::hal::spi;
use ili9341::{Ili9341, Orientation};

// use embedded_hal;

#[toml_cfg::toml_config]
pub struct Config {
    #[default("")]
    wifi_ssid: &'static str,
    #[default("")]
    wifi_psk: &'static str,
}

fn main() -> Result<()> {
    // It is necessary to call this function once. Otherwise some patches to the runtime
    // implemented by esp-idf-sys might not link properly. See https://github.com/esp-rs/esp-idf-template/issues/71
    esp_idf_svc::sys::link_patches();

    // Bind the log crate to the ESP Logging facilities
    esp_idf_svc::log::EspLogger::initialize_default();

    log::info!("Hello, world!");

    let peripherals = Peripherals::take().unwrap();
    let sysloop = EspSystemEventLoop::take();

    // The constant `CONFIG` is auto-generated by `toml_config`.
    let app_config = CONFIG;

    log::info!("Set BL");
    PinDriver::input_output_od(unsafe {gpio::Gpio32::new()}).unwrap().set_high()?;

    log::info!("Set Pin");
    let sclk = unsafe {  gpio::Gpio18::new() };
    let spi = unsafe { spi::SPI2::new() };
    let sdo = unsafe { gpio::Gpio23::new() };

    let cs = unsafe { gpio::Gpio11::new() };



    log::info!("Set SpiDeviceDriver config");
    let config = spi::config::Config::new()
        .baudrate(26.MHz().into())
        .data_mode(MODE_3);

    // log::info!("Set SpiDriver");
    // let spi = spi::SpiDriver::new(
    //     spi,
    //     sclk,
    //     sdo,
    //     None::<AnyIOPin>,
    //     &spi::SpiDriverConfig::new(),
    // )?;
    //
    // log::info!("Set SpiDeviceDriver");
    //
    // let spi = spi::SpiDeviceDriver::new(spi, Some(cs), &config)?;


    log::info!("Set SpiDriver single");
    let device = spi::SpiDeviceDriver::new_single(
        spi,
        peripherals.pins.gpio18,
        peripherals.pins.gpio23,
        None,
        Some(cs),
        &spi::SpiDriverConfig::new(),
        &config,
    )?;


    log::info!("Set SPIInterface");
    let rst = PinDriver::input_output_od(unsafe { gpio::Gpio33::new() })?;
    let dc = PinDriver::input_output_od(unsafe { gpio::Gpio27::new() })?;

    let iface = SPIInterface::new(device, dc);

    log::info!("Set ILI9341");
    let mut display = match Ili9341::new(
        iface,
        rst,
        &mut delay::Ets,
        Orientation::Landscape,
        ili9341::DisplaySize320x480,
    ) {
        Ok(d) => d,
        Err(err) => {
            log::error!("new Ili9341 failed: {:?}", err);
            return Ok(());
        }
    };

    log::info!("Clear ILI9341");
    display.clear_screen(0x5555).expect("ok");


    log::info!("Connect Wifi");

    // Connect to the Wi-Fi network
    let _wifi = wifi(
        app_config.wifi_ssid,
        app_config.wifi_psk,
        peripherals.modem,
        sysloop.expect("???"),
    );

    if let Err(e) = _wifi {
        eprintln!("failed to connect to Wi-Fi: {}", e);
    }

    sleep(Duration::from_secs(10));

    // Set the HTTP server
    let mut server = EspHttpServer::new(&Configuration::default())?;

    // http://<sta ip>/ handler
    server.fn_handler("/", Method::Get, move |request| {
        let html = index_html();
        let mut response = request.into_ok_response()?;
        response.write_all(html.as_bytes())?;
        anyhow::Ok(())
    })?;

    // http://<sta ip>/temperature handler
    server.fn_handler("/healthz", Method::Get, move |request| {
        let html = temperature(66.6);
        let mut response = request.into_ok_response()?;
        response.write_all(html.as_bytes())?;
        anyhow::Ok(())
    })?;

    println!("Server awaiting connection");

    loop {
        sleep(Duration::from_millis(1000));
    }
}

fn templated(content: impl AsRef<str>) -> String {
    format!(
        r#"
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>esp-rs web server</title>
    </head>
    <body>
        {}
    </body>
</html>
"#,
        content.as_ref()
    )
}

fn index_html() -> String {
    templated("Hello from ESP32-C3!")
}

fn temperature(val: f32) -> String {
    templated(format!("Chip temperature: {:.2}°C", val))
}
